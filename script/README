In this directory, scripts executing the face verification tools are given. Currently, there is only one tool that:

- deals with different databases
  -> use the --database option, giving it one configuration file from config/databases/
- preprocesses images and extracts features 
  -> use the --feature-extraction option, giving it one configuration file from config/features/
- trains a feature projection model, projects features, generated models, computes scores between models and probes, and finally generates zt-norm scores
  -> use the --tool option, giving it one configuration file from config/tools/
- executes the sub-jobs in the grid
  -> use the --grid option, giving it one configuration file from config/grid/
  NOTE: if the --grid option is not given, the tool chain will be executed on the local machine, by default using the local directory for TEMP output
  
Dependent on your specified "--tool", some parts of the toolchain might be skipped (if the tool does not require this parts). Furthermore, you can also skip other parts of the toolchain using the --skip-... options. Do this only, when these steps have been executed before. Otherwise, the following steps of the toolchain will not be able to work properly.

Additionally, you can personalize your results, e.g., by specifying different directories. One option you should always use is the --sub-directory option, where you can specify sub-directory in the user or temp folder under which the experimental results should be stored. Also, the --scores-subdir might be needfull when different kinds of scoring functions (e.g., different distance functions) are executed on the same models and probes. For each other file or directory name, useful default values are given. Please note that not all tools use all avialable options.

Usually, files are not regenerated when they already exist. To force the regeneration of all files, the --force option can be selected. This is also useful in combination with the --skip-... options, to avoid recomputing everything.

If your probe files are small enough, it is possible to specify the --preload-probes option to load all probe files into memory before computing scored. This will increase the memory load of the program, but it will save some file/network accesses and usually speeds up score computation.
